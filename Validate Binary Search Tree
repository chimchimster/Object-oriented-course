from typing import Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        node = root
        list_of_nodes = [node]
        if not node.right and not node.left:
            return True
        while list_of_nodes:
            list_of_brances = []
            for branch in list_of_branches:
                if branch:
                    if branch.left:
                        if branch.left.val >= branch.val:
                            return False
                        list_of_branches += [branch.left]
                    if branch.right:
                        if branch.right.val <= branch.val:
                            return False
                        list_of_branches += [branch.right]
            list_of_nodes = list_of_branches
        return True
s = Solution()
print(s.isValidBST(TreeNode(2, TreeNode(1, ), TreeNode(3, ))))
print(s.isValidBST(TreeNode(5, TreeNode(1, ), TreeNode(4, TreeNode(3, ), TreeNode(6, )))))
print(s.isValidBST(TreeNode(5, TreeNode(4, ), TreeNode(6, TreeNode(3, ), TreeNode(7, )))))
print(s.isValidBST(TreeNode(2, TreeNode(2, ), TreeNode(2, ))))
