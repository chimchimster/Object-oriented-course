# АЛГОРИТМ

# 1. Интерфейс для загрузки аккаунтов, создание БД
# 2. Парсинг каждой страницы
# 3. Обновили таблицу базы данных
# 4. Повторили

import requests, re

from mysql.connector import connect, Error
from bs4 import BeautifulSoup

ACCOUNTS_FOR_SCRAPING = ['https://ok.ru/orbakaiteofficial']


def db_decorator(func):
    def wrapper(*args, **kwargs):
        con = connect(
            host='localhost',
            user='root',
            password=''
        )
        try:
            result = func(*args, connection=con, *kwargs)
        except Error as e:
            print(e)
            print('SQL failed!')
        else:
            con.commit()
            return result
        finally:
            con.close()
    return wrapper


class ParseAccount:
    def __init__(self, page, name_class='profile-user-info_name', name_tag='h1', menu_class='mctc_navMenu', menu_tag='nav', data_class='mctc_navMenuSec',  a_tag='a'):
        self.page = page
        self.a_tag = a_tag
        self.name_class = name_class
        self.name_tag = name_tag
        self.menu_class = menu_class
        self.menu_tag = menu_tag
        self.data_class = data_class
        self.data_collection = []

    def push_to_data_collection(self):
        request = requests.get(self.page)
        soup = BeautifulSoup(request.text, 'html.parser')
        print(self.__dict__)

        name = soup.find(self.a_tag, class_=self.name_class).find(self.name_tag)
        data = soup.find(self.menu_tag, class_=self.menu_class).find_all(self.a_tag, self.data_class)
        return {name.text: [(re.split('(\d+)',''.join(d.text.split('\xa0'))))[:2] for d in data if len(d.text.split('\xa0')) > 1]}


class DataBase:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)

        return cls._instance

    def __init__(self, db_name='ok', host='localhost', user='root', password='QweQwe!23'):
        self._db_name = db_name
        self._host = host
        self._user = user
        self._password = password

    @db_decorator
    def create_db(self, *args, **kwargs):
        connection = kwargs.pop('connection')
        cursor = connection.cursor()
        cursor.execute(f"CREATE DATABASE {self._db_name}")
        print('DATABASE SUCCESSFULLY CREATED')

    @db_decorator
    def create_db_table(self, *args, **kwargs):
        connection = kwargs.pop('connection')
        cursor = connection.cursor()
        cursor.execute(f'USE {self._db_name}')
        cursor.execute(f"CREATE TABLE {args[0]} ({', '.join([x for x in args[1:]])});")
        print(f'TABLE {args[0]} SUCCESSFULLY CREATED')

d = DataBase()
d.create_db_table('first', 'id int', 'name VARCHAR(255)')

#p = ParseAccount('https://ok.ru/stas.mihailov.official', 'profile-user-info_name')
#print(p.push_to_data_collection())

"""
        try:
            with connect(
                host=self._host,
                user=self._user,
                password=self._password
            ) as connection:
                with connection.cursor() as cursor:
                    cursor.execute(f"CREATE DATABASE {self._db_name}")
                    print('DATABASE SUCCESSFULLY CREATED')
        except Error as e:
            print(e)
"""
