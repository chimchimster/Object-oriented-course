import re
import time
import requests
from bs4 import BeautifulSoup
from mysql.connector import connect, Error
https://us04web.zoom.us/j/79151643004?pwd=MbQtZxm8FpdDYWaSUacb0alpEsYK5F.1

def db_decorator(func):
    def wrapper(*args, **kwargs):
        con = connect(
            host='localhost',
            user='root',
            password='QweQwe!23'
        )
        try:
            result = func(*args, connection=con, *kwargs)
        except Error as e:
            print(e)
            print('SQL failed!')
        else:
            con.commit()
            return result
        finally:
            con.close()
    return wrapper


class ParseAccount:
    def __init__(self, page, account_id, name_class='profile-user-info_name', name_tag='h1', menu_class='mctc_navMenu', menu_tag='nav', data_class='mctc_navMenuSec',  a_tag='a'):
        self.page = page
        self.account_id = account_id
        self.a_tag = a_tag
        self.name_class = name_class
        self.name_tag = name_tag
        self.menu_class = menu_class
        self.menu_tag = menu_tag
        self.data_class = data_class
        self.data_collection = []

    def push_to_data_collection(self):
        request = requests.get(self.page)
        soup = BeautifulSoup(request.text, 'html.parser')

        name = soup.find(self.a_tag, class_=self.name_class).find(self.name_tag)
        data = soup.find(self.menu_tag, class_=self.menu_class).find_all(self.a_tag, self.data_class)

        rough_data = [(re.split('(\d+)', ''.join(d.text.split('\xa0')))) for d in data]
        normalized_data = self.normalize_data(rough_data)

        self.data_collection.append((name.text, self.account_id, *normalized_data))


    @staticmethod
    def normalize_data(collection):
        normalized_collection = []

        for element in collection[1:]:
            if len(element) == 1:
                normalized_collection.append(element+['0'])
            else:
                normalized_collection.append(element)

        return [element[1] for element in normalized_collection]


class DataBase:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)

        return cls._instance

    def __init__(self, db_name):
        self._db_name = db_name

    @db_decorator
    def create_db(self, *args, **kwargs):
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        cursor.execute(f"CREATE DATABASE {self._db_name}")
        print('DATABASE SUCCESSFULLY CREATED')

    @db_decorator
    def create_table(self, *args, **kwargs):
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        cursor.execute(f'USE {self._db_name}')
        cursor.execute(f"CREATE TABLE {args[0]} ({', '.join([arg for arg in args[1:]])});")
        print(f'TABLE {args[0]} SUCCESSFULLY CREATED')

    @db_decorator
    def send_to_table(self, table_name: str, columns: tuple, collection: list, *args, **kwargs) -> None:
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        insert = '%s,' * len(columns)
        cursor.execute(f"USE {self._db_name}")
        if len(collection) > 1:
            cursor.executemany(f"REPLACE INTO {table_name} ({', '.join([col for col in columns])}) VALUES ({insert[:-1]})", collection)
        else:
            cursor.execute(f"REPLACE INTO {table_name} ({', '.join([col for col in columns])}) VALUES ({insert[:-1]})", collection)

        print("DATA SUCCESSFULLY ADDED TO DATABASE")

    @db_decorator
    def get_data_for_parse(self, table_name, *args, **kwargs):
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        cursor.execute(f"USE {self._db_name}")
        cursor.execute(f"SELECT * FROM {table_name}")

        return [item for item in cursor.fetchall()]


    @db_decorator
    def drop_table(self, table_name: str, *args, **kwargs) -> None:
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        cursor.execute(f"USE {self._db_name}")
        cursor.execute(f"DROP TABLE {table_name}")
        print("TABLE SUCCESSFULLY DROPPED")

    @db_decorator
    def update_table(self, table_name: str, columns: tuple, collection: list, *args, **kwargs) -> None:
        connection = kwargs.pop('connection')
        cursor = connection.cursor()

        columns = tuple([col + "=%s" for col in columns])
        cursor.execute(f"USE {self._db_name}")
        if len(collection) > 1:
            cursor.executemany(f"UPDATE {table_name} SET {', '.join([col for col in columns])} WHERE account_id=%s;", collection)
        else:
            cursor.execute(f"UPDATE {table_name} SET {', '.join([col for col in columns])} WHERE account_id=%s;", collection)
        print("DATA SUCCESSFULLY UPDATED")


def main():
    database = DataBase('ok')
    ACCOUNTS_FOR_SCRAPPING = (
                            ('https://ok.ru/stas.mihailov.official',),
                            ('https://ok.ru/mashaweber',),
                            ('https://ok.ru/orbakaiteofficial',),
                            ('https://ok.ru/profile/591994939911',),
                            ('https://ok.ru/profile/600552696599',),
                            ('https://ok.ru/profile/588470996921',)
    )

    # Creating DB
    try:
        database.create_db()
    except Exception:
        print('Database already exists')

    # Creating tables
    try:
        database.create_table('accounts', 'account_id int NOT NULL AUTO_INCREMENT', 'link VARCHAR(100) NOT NULL', 'PRIMARY KEY (account_id)', 'UNIQUE KEY unique_link (link)')
    except Exception:
        print('Table already exists')
    try:
        database.create_table('data', 'data_id int NOT NULL AUTO_INCREMENT', 'account_id int NOT NULL', 'name VARCHAR(255)', 'followers int', 'photo int', 'notes int', 'gr int', 'games int', 'vid int', 'PRIMARY KEY (data_id)', 'FOREIGN KEY (account_id) REFERENCES accounts(account_id) ON DELETE CASCADE', 'UNIQUE KEY (account_id)')
    except Exception:
        print('Table already exists')

    # Fill table accounts with initial data
    # also prevents duplicates if data already exists in DB
    database.send_to_table('accounts', ('link',), ACCOUNTS_FOR_SCRAPPING)

    def generate_send_data():
        # Drag info from accounts for scrapping
        data_for_scrapping = database.get_data_for_parse('accounts')

        # Collection for initial sending data to DB
        send_collection = []

        # Parse pages for initial DB migration
        for id, page in data_for_scrapping:
            page_obj = ParseAccount(page, id)
            page_obj.push_to_data_collection()
            send_collection.append(*page_obj.data_collection)

        return send_collection

    # Initial migration
    database.send_to_table('data', ('name', 'account_id', 'followers', 'photo', 'notes', 'gr', 'games', 'vid',), generate_send_data())

    # Updating existing data \ infinite parse
    while True:
        optimized_collection = [tuple(list(col)+[col[1]]) for col in generate_send_data()]
        time.sleep(10)
        # Migration (update)
        database.update_table('data', ('name', 'account_id', 'followers', 'photo', 'notes', 'gr', 'games', 'vid',), optimized_collection)


if __name__ == '__main__':
    main()
